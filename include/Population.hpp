//
// Created by Maxwell Babey on 11/2/22.
//

#ifndef LAB1TEMPLATE_POPULATION_HPP
#define LAB1TEMPLATE_POPULATION_HPP

#include "Tour.hpp"
#include <vector>
#include <set>
#include <list>

using namespace std;

/**
 * Population
 * <p>
 * A Population is a list of Tours. A Population contains a number of elite Tours, which are those Tours with the best
 * fitness. A Population may be sorted, which puts the best-fit Tours at the front of the Population. A Population may
 * be asked to crossover, which will replace all non-elite Tours with new Tours generated by crossing randomly selected
 * Tours. A Population may be asked to mutate, which will with MUTATION_RATE probability cause all non-elite Tours
 * within to mutate.
 * </p>
 */
class Population
{
public:
    /**
     * Constructor
     * <p>
     * Create a Population given a parameter list of Tours.
     * </p>
     * @param population - a list of Tours
     */
    explicit Population(vector<Tour *> population) : population(std::move(population))
    {}
    
    /**
     * Destructor
     * <p>
     * Destroy each Tour in this Population's population. Then, destroy this Population.
     * </p>
     */
    ~Population()
    {
        for (Tour *t : population)
        {
            delete t;
        }
    }
    
    /**
     * Sort a Population's list of Tours, placing the fittest at the front.
     *
     * Note: For more than one elite, this method is faster than searching for elites
     * and moving them to the front one at a time.
     */
    void sort_population();
    
    /**
     * get_tour_at_index
     * <p>
     * Get the Tour at the parameter index.
     * </p>
     * @param index - the index at which to retrieve the Tour
     * @return the Tour at the index
     */
    Tour *get_tour_at_index(size_t index)
    {
        return population[index];
    }
    
    /**
     * get_best_fitness
     * <p>
     * Get the value of the best fitness in this Population by sorting it and reporting the fitness of the first Tour.
     * </p>
     * @return the best fitness in this Population
     */
    double get_best_fitness()
    {
        sort_population();
        return population[0]->determine_fitness();
    }
    
    /**
     * select_parent_candidates
     * <p>
     * Randomly select a set of PARENT_POOL_SIZE parent candidates from this Population.
     * </p>
     * @return - the set of randomly selected parents.
     */
    set<Tour *> select_parent_candidates();
    
    /**
     * select_parents
     * <p>
     * Given a list of sets of parent candidates, select the parent with the best fitness from each set
     * </p>
     * @param parent_candidates - a list of sets of parents
     * @return a vector containing the best-fit parent from each set
     */
    static vector<Tour *> select_parents(list<set<Tour *>> &parent_candidates);
    
    /**
     * mate_parents
     * <p>
     * Create a new Tour by crossing num_parents parent Tours. num_parents - 1 bounds are selected randomly
     * between 0 and tour_size - 1. The first parent's Cities are copied from 0 up to the first bound; the second
     * parent's Cities are copied from the first bound + 1 up to the second bound; the nth parent's Cities are copied up
     * from the (n - 1)th bound + 1 to tour_size - 1. If a duplicate City is to be copied into the child
     * Tour, instead the index of the parent being copied from will be incremented.
     * </p>
     * @param parents - a vector of parent Tours to cross in order to create a new Tour
     * @return - a new Tour (alloc)
     */
    static Tour *mate_parents(vector<Tour *> &parents);

    /**
     * crossover
     * <p>
     * For each Tour in the population excluding the elites, get num_parents parents and mate them to create a new Tour to
     * replace the old Tour.
     * </p>
     */
    void crossover();
    
    /**
     * mutate
     * <p>
     * For each Tour in the population, based on the MUTATION_RATE, decide whether to mutate the Tour.
     * </p>
     */
    void mutate();
    
    /**
     * set_options
     * <p>
     * Override the default options for all Populations. Options include the size of a Population.
     * </p>
     * @param options - pointer to an array containing options values.
     */
    static void set_options(const int *options);
    
    /**
     * get_population_size
     * <p>
     * Get the number of Tours in a Population.
     * </p>
     * @return the size of a Population
     */
    static size_t get_population_size()
    {
        return population_size;
    }
    
    /**
     * get_num_parents
     * <p>
     * Get the number of parents of a Tour.
     * </p>
     * @return the number of parents of a Tour
     */
    static size_t get_num_parents()
    {
        return num_parents;
    }
    
    /**
     * get_num_elites
     * <p>
     * Get the number of elites in a Population.
     * </p>
     * @return the number of elites in a Population
     */
    static size_t get_num_elites()
    {
        return num_elites;
    }
    
private:
    /**
     * The list of Tours contained in this population.
     */
    vector<Tour *> population;
    
    /**
     * The maximum size of a population.
     */
    static size_t population_size;
    
    /**
     * The number of parents to cross when making a child tour.
     */
    static size_t num_parents;
    
    /**
     * The number of elites in a population.
     */
    static size_t num_elites;
    
};

#endif //LAB1TEMPLATE_POPULATION_HPP
